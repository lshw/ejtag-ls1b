/*
 * put filename  addr 
 */

int cmd_put(int argc,char **argv)
{
	unsigned long download_addr;
	struct stat statbuf;
	char *buf;
	int fd;
	int context_reg[dMIPS32_NUM_DEBUG_REGISTERS];
	if(stat(argv[1],&statbuf)!=0)
	{
		printf("error read file %s\n",argv[1]);
		exit(-1);
	}
printf("open file %s,size %d\n",argv[1],statbuf.st_size);
buf=malloc(statbuf.st_size+4);
if(!buf)printf("error allocate memory\n");
fd=open(argv[1],O_RDONLY);
read(fd,(buf+4),statbuf.st_size);
close(fd);
download_addr=strtoul(argv[2],0,0);


	context_save(context_reg);
    
    {
	    unsigned int code_inst_download[]=
tgt_compile(\
"li v0,0xff20fe04;\n" \
"1:lw v1,0(v0);\n" \
"sw v1,0(a0);\n" \
"addiu a1,-4;\n" \
"bnez a1,1b;\n" \
"addiu a0,a0,4;\n" \
"nop ;\n" \
"li ra,0xff200200 ;\n" \
"jr ra ;\n" \
"nop;\n" \
);


	jtag_putmem(code_inst_download,help_addr,sizeof(code_inst_download));
    }


 {
unsigned int miro_inst_2[]=
tgt_compile(\
"bal 1f;\n" \
"nop;\n" \
"param:\n" \
".space	12 \n" \
"1:\n" \
"lw v0,(ra);\n" \
"lw a0,4(ra);\n" \
"lw a1,8(ra);\n" \
"jr v0;\n" \
"nop ;\n" \
);

unsigned int nop[]=
	tgt_compile("nop\n");

	    miro_inst_2[2]=help_addr;
	    miro_inst_2[3]=download_addr;
	    miro_inst_2[4]=statbuf.st_size;
    fMIPS32_ExecuteDebugModule(miro_inst_2,0x8000,3);
#    fMIPS32_ExecuteDebugModule(nop,4,3);
}

	fMIPS32_USB_DownloadModule(buf,statbuf.st_size);

	context_restore(context_reg);

free(buf);


    return 0;
}

mycmd_init(put,cmd_put,"put","put filename address");

